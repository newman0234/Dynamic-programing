int all_ways(vector<vector<int>>points,int day,int last,int dp[][4]){
    if(day==0){
        int maximum=0;
        for(int i=0;i<=2;i++){
            if(i!=last){
                maximum=max(maximum,points[day][i]);
            }
        }
        return maximum;
    }
    if(dp[day][last]!=-1){
        return dp[day][last];
    }
    int maximum=0;
    for(int i=0;i<=2;i++){
        if(i!=last){
            int val=points[day][i]+all_ways(points,day-1,i,dp);
            maximum=max(val,maximum);
        }
    }
    return dp[day][last]=maximum;
}





int ninjaTraining(int n, vector<vector<int>> &points)
{
    int dp[n][4];
    for(int i=0;i<n;i++){
        for(int j=0;j<=3;j++){
            dp[i][j]=-1;
        }
    }
return all_ways(points,n-1,3,dp);
    // Write your code here.
    //int n=points.size();
//    pair<int,pair<int,int>>p;
//    p.first=points[0][0];
//    p.second.first=points[0][1];
//    p.second.second=points[0][2];
//    for(int i=1;i<n;i++){
//        int val1=points[i][0]+max(p.second.first,p.second.second);
//        int val2=points[i][1]+max(p.first,p.second.second);
//        int val3=points[i][2]+max(p.first,p.second.first);
//        p.first=val1;
//        p.second.first=val2;
//        p.second.second=val3;

//    }
//    int ans=max(p.first,max(p.second.first,p.second.second));
//    return ans;

}
