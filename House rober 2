#include <bits/stdc++.h>
long long int max_sum(vector<int>v){
         int n=v.size();
         long long int dp[n];
         dp[0]=v[0];
         if(n>=2){
             dp[1]=max(v[0],v[1]);
         }
         for(int i=2;i<n;i++){
             long long int pic=v[i]+dp[i-2];
             long long int non_pic=dp[i-1];
             dp[i]=max(pic,non_pic);
         }
         return dp[n-1];
} 
long long int houseRobber(vector<int>& valueInHouse)
{
    // Write your code here.

    vector<int>v1;
    vector<int>v2;
    int n=valueInHouse.size();
    if(n==1){
        return valueInHouse[0];
    }
    for(int i=0;i<valueInHouse.size();i++){
        if(i!=n-1){
            v1.push_back(valueInHouse[i]);
        }
        if(i!=0){
            v2.push_back(valueInHouse[i]);
        }
    }
    long long int ans=max_sum(v1);
    long long int ans1=max_sum(v2);
    return max(ans1,ans);
}
